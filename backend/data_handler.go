package backend

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/nirmalpillai17/cve_tracker/logging"
	"github.com/nirmalpillai17/cve_tracker/models"
	xl "github.com/xuri/excelize/v2"
)

type customClient struct {
	url             string
	headers         http.Header
	payloadMain     []byte
	payloadDirector []byte
	httpClient      *http.Client
	waitGroup       *sync.WaitGroup
}

const (
	main int = iota
	director
)

var cl models.Logger = logging.NewLogger()
var basePath, _ = os.Getwd()

func (cc customClient) getGraphanaData(payload io.Reader, length int) (out []byte, err error) {
	req, err := http.NewRequest(http.MethodGet, cc.url, payload)
	if err != nil {
		cl.Error(err)
		return
	}
	req.Header = cc.headers
	req.Header.Set("Content-Length", strconv.Itoa(length))
	resp, err := cc.httpClient.Do(req)
	if err != nil {
		cl.Error(err)
		return
	}
	cl.Info("request sent successfully")
	defer resp.Body.Close()
	out, err = io.ReadAll(resp.Body)
	if err != nil {
		cl.Error(err)
		return
	}
	return
}

func (cc customClient) getDirectorData(name string) {
	defer cc.waitGroup.Done()
	payload, length, err := cc.parsePayload(director, name)
	if err != nil {
		cl.Error(err)
		return
	}
	out, err := cc.getGraphanaData(payload, length)
	if err != nil {
		cl.Error(err)
		return
	}
	saveData(director, out)
}

func (cc customClient) getFullData() (err error) {
	payload, length, err := cc.parsePayload(main, "")
	if err != nil {
		cl.Error(err)
		return
	}
	out, err := cc.getGraphanaData(payload, length)
	if err != nil {
		cl.Error(err)
		return
	}
	data := saveData(main, out)
	for _, x := range data.Response {
		for _, y := range x.Hits.HitsInner {
			cc.waitGroup.Add(1)
			go cc.getDirectorData(y.Source.Director)
			cc.waitGroup.Wait()
		}
	}
	return nil
}

func (cc customClient) parsePayload(fl int, dr string) (io.Reader, int, error) {
	var payloadStr string
	switch fl {
	case main:
		payloadStr = fmt.Sprintf(string(cc.payloadMain), time.Now().UnixMilli())
		break
	case director:
		payloadStr = fmt.Sprintf(string(cc.payloadDirector), time.Now().UnixMilli(), dr)
		break
	default:
		return nil, 0, errors.New("bad flag")
	}
	return strings.NewReader(payloadStr), len(payloadStr), nil
}

func saveData(fl int, data []byte) (value models.ResponseFormat) {
	if err := json.Unmarshal(data, &value); err != nil {
		cl.Error(err)
		return
	}
	switch fl {
	case main:
		file := xl.NewFile()
		file.NewSheet("CVE Summary")
		defer file.Close()
		for _, a := range value.Response {
			for y, b := range a.Hits.HitsInner {
				pos, _ := xl.CoordinatesToCellName(1, y+1)
				sl := []any{
					b.Source.Director,
					b.Source.TotalCritical,
					b.Source.TotalHigh,
					b.Source.TotalMedium,
					b.Source.TotalLow,
					b.Source.ElapsedCVE,
					b.Source.ElapsedCVECritical,
					b.Source.ElapsedCVEHigh,
					b.Source.ElapsedCVEMedium,
					b.Source.ElapsedCVELow, 
				}
				err := file.SetSheetRow("CVE Summary", pos, &sl)
				if err != nil {
					cl.Error(err)
				}
			}
		}
		if err := file.SaveAs(basePath + "/data.xlsx"); err != nil {
			cl.Error(err)
		}
	}
	return
}
