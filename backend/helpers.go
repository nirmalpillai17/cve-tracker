package backend

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

const url string = "https://cloudqa-dashboard.arubadev.cloud.hpe.com/api/datasources/proxy/uid/qDaBgRfVk/_msearch?max_concurrent_shard_requests=5"

var payload string
var headers http.Header

func getGraphanaData() {
	basePath, err := os.Getwd()
	if err != nil {
		fmt.Println("Error finding file: ", err)
	}
	payload, err := os.ReadFile(basePath + "/payload.txt")
	if err != nil {
		fmt.Println("Error reading file: ", err)
	}
	config, err := os.ReadFile(basePath + "/headers.json")
	if err != nil {
		fmt.Println("Error reading file: ", err)
	}
	if err = json.Unmarshal(config, &headers); err != nil {
		fmt.Println("Error Unmarshalling JSON: ", err)
	}
	payloadStr := fmt.Sprintf(string(payload), time.Now().UnixMilli())
	req, _ := http.NewRequest(http.MethodGet, url, strings.NewReader(payloadStr))
	req.Header = headers
	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request: ", err)
	}
	out, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Couldn't read", err)
	}
	fmt.Println(string(out))
}
