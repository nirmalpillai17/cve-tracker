package backend

import (
	"strings"
	"time"

	"github.com/nirmalpillai17/cve_tracker/models"
	gl "github.com/nirmalpillai17/cve_tracker/global"
	xl "github.com/xuri/excelize/v2"
)

func exportWorkBook(resp chan map[string]models.Format) {
	wb := xl.NewFile()
	var datahandle []map[string]models.Format
	var value models.Format
	var key string
	var head *[]any
	var fl int
	for data := range resp {
		datahandle = append(datahandle, data)
		for key = range data {
			wb.NewSheet(key)
			value = data[key]
			if len(value.Response[0].Hits.HitsInner[0].Source.CVEId) > 0 {
				fl = director
				head = &[]any{
					"DIRECTOR NAME",
					"MANAGER NAME",
					"CVE ID",
					"CVE TYPE",
					"DAYS LEFT",
					"SEVERITY",
					"PACKAGE NAME",
					"CURRENT VERSION",
					"FIXED VERSION",
					"TAG",
					"PACKAGE TYPE",
					"IMAGE NAME",
					"S3 LINK",
					"DEPLOYMENT LIST",
					"TOTAL DEPLOYMENTS",
				}
			} else {
				fl = main
				head = &[]any{
					"DIRECTOR",
					"TOTAL - OS",
					"TOTAL - LIB",
					"PATCHABLE CVEs",
					"ELAPSED CVEs",
					"CRITICAL",
					"HIGH",
					"MEDIUM",
					"LOW",
					"ELAPSED CRITICAL",
					"ELAPSED HIGH",
					"ELAPSED MEDIUM",
					"ELAPSED LOW",
				}
			}
			err := wb.SetSheetRow(key, "A1", head)
			if err != nil {
				gl.Cl.Error(err)
			}
		}
		for _, a := range value.Response {
			for y, b := range a.Hits.HitsInner {
				pos, err := xl.CoordinatesToCellName(1, y+2)
				if err != nil {
					gl.Cl.Error(err)
				}
				fields := getFields(fl, b)
				err = wb.SetSheetRow(key, pos, fields)
				if err != nil {
					gl.Cl.Error(err)
				}
			}
		}
	}
	wb.DeleteSheet("Sheet1")
	fn := time.Now().Format(time.DateOnly) + ".xlsx"
	if err := wb.SaveAs(strings.Join([]string{gl.Bp, gl.Cm.OutDir, fn}, "/")); err != nil {
		gl.Cl.Error(err)
	}
}

func getFields(fl int, dt models.HitsInner) *[]any {
	switch fl {
	case director:
		return &[]any{
			dt.Source.Director,
			dt.Source.Manager,
			dt.Source.CVEId,
			dt.Source.VulnType,
			dt.Source.DaysLeft,
			dt.Source.Severity,
			dt.Source.PackageName,
			dt.Source.InstalledVersion,
			dt.Source.FixedVersion,
			strings.Join(dt.Source.AppTags, ", "),
			dt.Source.PackageType,
			dt.Source.ImageName,
			dt.Source.JsonLink,
			strings.Join(dt.Source.DepList, ", "),
			dt.Source.TotalDeployements,
		}
	case main:
		return &[]any{
			dt.Source.Director,
			dt.Source.TotalOS,
			dt.Source.TotalLIB,
			dt.Source.Total,
			dt.Source.ElapsedCVE,
			dt.Source.TotalCritical,
			dt.Source.TotalHigh,
			dt.Source.TotalMedium,
			dt.Source.TotalLow,
			dt.Source.ElapsedCVECritical,
			dt.Source.ElapsedCVEHigh,
			dt.Source.ElapsedCVEMedium,
			dt.Source.ElapsedCVELow,
		}
	default:
		return nil
	}
}
