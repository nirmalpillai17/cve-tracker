package backend

import (
	"github.com/nirmalpillai17/cve_tracker/logging"
	"github.com/nirmalpillai17/cve_tracker/models"

	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

const url string = "https://cloudqa-dashboard.arubadev.cloud.hpe.com/api/datasources/proxy/uid/qDaBgRfVk/_msearch?max_concurrent_shard_requests=5"

var headers http.Header
var httpClient http.Client = http.Client{}

// Logger should implement models.Logger
var cl models.Logger = logging.NewLogger()

func getGraphanaData(config []byte, payload []byte) (out []byte) {
	if err := json.Unmarshal(config, &headers); err != nil {
		cl.Error(err)
		return
	}
	payloadStr := fmt.Sprintf(string(payload), time.Now().UnixMilli())
	req, err := http.NewRequest(http.MethodGet, url, strings.NewReader(payloadStr))
	if err != nil {
		cl.Error(err)
		return
	}
	req.Header = headers
	resp, err := httpClient.Do(req)
	if err != nil {
		cl.Error(err)
		return
	}
	cl.Info("request sent successfully")
	defer resp.Body.Close()
	out, err = io.ReadAll(resp.Body)
	if err != nil {
		cl.Error(err)
		return
	}
	return out
}
