package backend

import (
	"github.com/nirmalpillai17/cve_tracker/logging"
	"github.com/nirmalpillai17/cve_tracker/models"

	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type customClient struct {
	headers         []byte
	payloadMain     []byte
	payloadDirector []byte
	httpClient      http.Client
}

const (
	main int = iota
	director
)

const url string = "https://cloudqa-dashboard.arubadev.cloud.hpe.com/api/datasources/proxy/uid/qDaBgRfVk/_msearch?max_concurrent_shard_requests=5"

var headers http.Header

// Logger should implement models.Logger
var cl models.Logger = logging.NewLogger()

func (cc customClient) getGraphanaData(payload io.Reader, length int) (out []byte, err error) {
	if err = json.Unmarshal(cc.headers, &headers); err != nil {
		cl.Error(err)
		return
	}
	req, err := http.NewRequest(http.MethodGet, url, payload)
	if err != nil {
		cl.Error(err)
		return
	}
	req.Header = headers
	req.Header.Set("Content-Length", strconv.Itoa(length))
	resp, err := cc.httpClient.Do(req)
	if err != nil {
		cl.Error(err)
		return
	}
	cl.Info("request sent successfully")
	defer resp.Body.Close()
	out, err = io.ReadAll(resp.Body)
	if err != nil {
		cl.Error(err)
		return
	}
	return
}

func (cc customClient) getDirectorData(s string) {
	payload, length, err := cc.parsePayload(director, s)
	out, err := cc.getGraphanaData(payload, length)
	if err != nil {
		cl.Error(err)
		return
	}
	saveData(out)
}

func (cc customClient) getFullData() (err error) {
	payload, length, err := cc.parsePayload(main, "")
	if err != nil {
		cl.Error(err)
		return
	}
	out, err := cc.getGraphanaData(payload, length)
	if err != nil {
		cl.Error(err)
		return
	}
	var v models.JsonMain
	if err = json.Unmarshal(out, &v); err != nil {
		cl.Error(err)
		return
	}
	for _, x := range v.Response {
		for _, y := range x.Hits.HitsInner {
			go cc.getDirectorData(y.Source.Director)
		}
	}
	return nil
}

func (cc customClient) parsePayload(fl int, dr string) (io.Reader, int, error) {
	var payloadStr string
	switch fl {
	case main:
		payloadStr = fmt.Sprintf(string(cc.payloadMain), time.Now().UnixMilli())
		break
	case director:
		payloadStr = fmt.Sprintf(string(cc.payloadDirector), time.Now().UnixMilli(), dr)
		break
	default:
		return nil, 0, errors.New("bad flag")
	}
	return strings.NewReader(payloadStr), len(payloadStr), nil
}

func saveData(data []byte) {
	fmt.Println(string(data), "\n\n")
}
