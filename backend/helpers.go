package backend

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

const url string = "https://cloudqa-dashboard.arubadev.cloud.hpe.com/api/datasources/proxy/uid/qDaBgRfVk/_msearch?max_concurrent_shard_requests=5"

const payload string = "{\"search_type\":\"query_then_fetch\",\"ignore_unavailable\":true,\"index\":\"trivy_director_summary_fedramp_test\"}\n{\"size\":10000,\"query\":{\"bool\":{\"filter\":[{\"range\":{\"timestamp\":{\"gte\":1705231087248,\"lte\":1707823087248,\"format\":\"epoch_millis\"}}},{\"query_string\":{\"analyze_wildcard\":true,\"query\":\"cluster_name:panzer AND vul_type=ALL\"}}]}},\"sort\":[{\"timestamp\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}},{\"_doc\":{\"order\":\"desc\"}}],\"script_fields\":{}}\n"

var headers http.Header

func getGraphanaData() {
	config, err := os.ReadFile("/home/nirmal/repos/cve-tracker/backend/headers.json")
	if err != nil {
		fmt.Println("Error reading file: ", err)
	}
	if err = json.Unmarshal(config, &headers); err != nil {
		fmt.Println("Error Unmarshalling JSON: ", err)
	}
	client := http.Client{}
	req, _ := http.NewRequest(http.MethodGet, url, strings.NewReader(payload))
	req.Header = headers
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request: ", err)
	}
	out, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Couldn't read", err)
	}
	fmt.Println(string(out))
}
