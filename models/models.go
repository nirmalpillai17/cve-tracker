package models

const (
	Running int = iota
	Finished
	Failed
)

type Format struct {
	Response []response `json:"responses"`
}

type response struct {
	Hits hits `json:"hits"`
}

type hits struct {
	HitsInner []HitsInner `json:"hits"`
}

type HitsInner struct {
	Source source `json:"_source"`
}

type source struct {
	Director string `json:"director_name"`
	Manager  string `json:"manager_name"`

	ElapsedCVE         int `json:"elapsed_cve"`
	ElapsedCVECritical int `json:"elapsed_cve_critical"`
	ElapsedCVEHigh     int `json:"elapsed_cve_high"`
	ElapsedCVEMedium   int `json:"elapsed_cve_medium"`
	ElapsedCVELow      int `json:"elapsed_cve_low"`

	Total         int `json:"total"`
	TotalOS       int `json:"OS"`
	TotalLIB      int `json:"LIB"`
	TotalCritical int `json:"total_critical"`
	TotalHigh     int `json:"total_high"`
	TotalMedium   int `json:"total_medium"`
	TotalLow      int `json:"total_low"`

	CVEId             string   `json:"cve_id"`
	VulnType          string   `json:"vuln_type"`
	DaysLeft          int      `json:"days_left"`
	Severity          string   `json:"severity"`
	PackageName       string   `json:"package_name"`
	InstalledVersion  string   `json:"installed_version"`
	FixedVersion      string   `json:"fixed_version"`
	PublishedDate     string   `json:"published_date"`
	AppTags           []string `json:"app_tags"`
	PackageType       string   `json:"pkg_type"`
	TotalDeployements int      `json:"total_deployments"`
	DepList           []string `json:"dep_list"`
	ImageName         string   `json:"image_name"`
	Namespace         string   `json:"namespace"`
	JsonLink          string   `json:"s3_link_json"`
}

type Dir struct {
	LastModified string
	Date         string
	Name         string
}

type TmplData struct {
	Ip      string
	Port    string
	Message string
	Data    []Dir
}

type Status struct {
	value *int
}

func (s Status) WriteStatus(code int) {
	*s.value = code
}

type JobStatus struct {
	id int
	dict map[int]Status
}

func (js *JobStatus) NewJob() (Status, int) {
	var v int
	var s = Status{
		value: &v,
	}
	js.dict[js.id] = s
	js.id += 1
	return s, js.id-1
}

func (js *JobStatus) GetStatus(key int) (int, bool) {
	if s, ok := js.dict[key]; ok {
		return *s.value, true
	} else {
		return 0, false
	}
}

func NewJobStatus(size int) *JobStatus {
	return &JobStatus{
		id: 0,
		dict: make(map[int]Status, size),
	}
}