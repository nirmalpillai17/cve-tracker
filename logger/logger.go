package logger

import (
	"fmt"
	"log"
	"net/http"
	"os"
)

type CustomLogger struct {
	rmessage string
	message string
	infoLogger *log.Logger
	warnLogger *log.Logger
	errLogger  *log.Logger
	*log.Logger
}

func NewLogger(rm string) *CustomLogger {
	clg := &CustomLogger{
		rmessage: rm,
		message: rm,
		infoLogger: log.New(os.Stderr, "[INFO] ", log.Ltime|log.Lshortfile),
		warnLogger: log.New(os.Stderr, "[WARN] ", log.Ltime|log.Lshortfile),
		errLogger:  log.New(os.Stderr, "[ERRO] ", log.Ltime|log.Lshortfile),
		Logger:     log.Default(),
	}
	return clg
}

func (cl *CustomLogger) Info(s string) {
	cl.infoLogger.Output(2, s)
}

func (cl *CustomLogger) Warn(s string) {
	cl.warnLogger.Output(2, s)
}

func (cl *CustomLogger) Error(err error) {
	cl.errLogger.Output(2, fmt.Sprint(err.Error()))
}

func (cl *CustomLogger) HttpError(w http.ResponseWriter, err error, sc int) {
	cl.Error(err)
	http.Error(w, err.Error(), sc)
}

func (cl *CustomLogger) ResetMessage() {
	cl.message = cl.rmessage
}

func (cl *CustomLogger) GetMessage() string {
	return cl.message
}

func (cl *CustomLogger) WriteMessage(s string) {
	cl.message = s
	cl.Info(s)
}
